{"version":3,"sources":["serviceWorker.js","pages/PageNotFound/index.js","component/Common/NormalInput/index.js","service/constant.js","component/Common/navbar/index.js","component/NumberToWordComp/CardBody.js","component/NumberToWordComp/Footer.js","component/NumberToWordComp/index.js","pages/NumberToWord/NumberToWord.js","pages/ContactUs/index.js","pages/Policy/index.js","Routes.js","index.js"],"names":["Boolean","window","location","hostname","match","PageNotFound","class","href","target","rel","NormalInput","onChange","value","name","prefix","className","allowEmptyFormatting","allowNegative","thousandSeparator","CountryList","countyName","countyCode","keyCode","extraKey","currencyListNumber","CtryNm","CurrencyName","Ccy","CcyNbr","CcyMnrUnts","CountryListInterNational","MaterialUISwitch","styled","Switch","theme","width","height","padding","margin","transform","color","backgroundImage","encodeURIComponent","opacity","backgroundColor","palette","mode","content","position","left","top","backgroundRepeat","backgroundPosition","borderRadius","HeaderNavbar","handleSwitch","colorKey","isNightMode","useState","sticky","setSticky","useEffect","document","addEventListener","trackScroll","removeEventListener","scrollY","history","useHistory","Navbar","expand","Nav","onClick","push","FormGroup","FormControlLabel","control","sx","m","label","CardBody","Footer","FacebookFilled","writtenNumber","require","Option","Select","TextArea","Input","initialCurrencyWord","filter","ele","currencyOptions","map","NumberToWordComp","isAmount","convertedWord","currencySelect","isPrefix","amountNAN","copiedEnglish","copied","isLocale","isCurrencyWord","isInterNationalLocale","convertedWordInternational","isTheme","FormFields","setFormFields","currencySelectWord","setCurrencySelectWord","toWords","ToWords","localeCode","converterOptions","currency","ignoreDecimal","ignoreZeroCurrency","doNotAddOnly","handleConvertToWord","options","convert","lang","split","w","toUpperCase","substring","toLowerCase","join","handleCase","key","id","convertedCase","e","checked","title","placement","defaultValue","showSearch","dropdownStyle","placeholder","optionFilterProp","filterOption","input","option","children","indexOf","filterSort","optionA","optionB","localeCompare","valueKeyCode","filterCurrencySelectWord","getCountryCode","index","getIndiaList","handleSelect","parseInt","opt","splitValue","replace","text","onCopy","locale","showCount","maxLength","NumberToWord","event","preventDefault","onkeydown","ContactUs","Policy","Routes","path","component","exact","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2512077.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport \"./style.scss\";\r\n\r\nexport const PageNotFound = () => {\r\n  return (\r\n    <section class=\"page_404\">\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-12 \">\r\n            <div class=\"col-sm-10 col-sm-offset-1  text-center\">\r\n              <div class=\"four_zero_four_bg\">\r\n                <h1 class=\"text-center \">404</h1>\r\n              </div>\r\n\r\n              <div class=\"contant_box_404\">\r\n                <h3 class=\"h2\">Look like you're lost</h3>\r\n\r\n                <p>the page you are looking for not avaible!</p>\r\n\r\n                <a href=\"/\" target=\"_self\" rel=\"noopener noreferrer\">\r\n                  Go to Home\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nexport const NormalInput = ({\r\n  onChange,\r\n  value = \"\",\r\n  name,\r\n  prefix,\r\n  className,\r\n}) => {\r\n  return (\r\n    <NumberFormat\r\n      allowEmptyFormatting={true}\r\n      allowNegative={false}\r\n      thousandSeparator={true}\r\n      prefix={prefix ? prefix : \"Rs \"}\r\n      name={name}\r\n      value={`${value}`}\r\n      onChange={onChange}\r\n      className={className}\r\n    />\r\n  );\r\n};\r\n","export const CountryList = [\r\n  {\r\n    countyName: \"India-English\",\r\n    countyCode: \"en-IN\",\r\n    keyCode: 1,\r\n    prefix: \"₹\",\r\n    extraKey: 1,\r\n  },\r\n  {\r\n    countyName: \"India-Gujarati\",\r\n    countyCode: \"gu-IN\",\r\n    keyCode: 2,\r\n    extraKey: 1,\r\n  },\r\n  { countyName: \"India-Hindi\", countyCode: \"hi-IN\", keyCode: 3, extraKey: 1 },\r\n  { countyName: \"India-Marathi\", countyCode: \"mr-IN\", keyCode: 4, extraKey: 1 },\r\n  { countyName: \"Bangladesh\", countyCode: \"en-BD\", keyCode: 5, prefix: \"৳\" },\r\n  { countyName: \"France\", countyCode: \"fr-FR\", keyCode: 6, prefix: \"€\" },\r\n  { countyName: \"Ghana\", countyCode: \"en-GH\", keyCode: 7, prefix: \"gh¢\" },\r\n  { countyName: \"Iran\", countyCode: \"fa-IR\", keyCode: 8, prefix: \"IRR\" },\r\n  { countyName: \"Mauritius\", countyCode: \"en-MU\", keyCode: 9, prefix: \"MUR\" },\r\n  { countyName: \"Myanmar\", countyCode: \"en-MM\", keyCode: 10, prefix: \"MMK\" },\r\n  { countyName: \"Nigeria\", countyCode: \"en-NG\", keyCode: 11, prefix: \"NGN\" },\r\n  { countyName: \"Turkey\", countyCode: \"tr-TR\", keyCode: 12, prefix: \"TRY\" },\r\n  { countyName: \"UK\", countyCode: \"en-GB\", keyCode: 13, prefix: \"£\" },\r\n  { countyName: \"USA\", countyCode: \"en-US\", keyCode: 14, prefix: \"$\" },\r\n];\r\nexport const currencyListNumber = [\r\n  {\r\n    CtryNm: \"FRANCE\",\r\n    CurrencyName: \"Euro\",\r\n    Ccy: \"EUR\",\r\n    CcyNbr: \"978\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"€\",\r\n    keyCode: 6,\r\n    countyCode: \"fr-FR\",\r\n  },\r\n  {\r\n    CtryNm: \"GHANA\",\r\n    CurrencyName: \"Ghana Cedi\",\r\n    Ccy: \"GHS\",\r\n    CcyNbr: \"936\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"gh¢\",\r\n    keyCode: 7,\r\n    countyCode: \"en-GH\",\r\n  },\r\n  {\r\n    CtryNm: \"INDIA\",\r\n    CurrencyName: \"Indian Rupee\",\r\n    Ccy: \"INR\",\r\n    CcyNbr: \"356\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"₹\",\r\n    keyCode: 1,\r\n    countyCode: \"en-IN\",\r\n  },\r\n  {\r\n    CtryNm: \"IRAN (ISLAMIC REPUBLIC OF)\",\r\n    CurrencyName: \"Iranian Rial\",\r\n    Ccy: \"IRR\",\r\n    CcyNbr: \"364\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"IRR\",\r\n    keyCode: 8,\r\n    countyCode: \"fa-IR\",\r\n  },\r\n  {\r\n    CtryNm: \"MYANMAR\",\r\n    CurrencyName: \"Kyat\",\r\n    Ccy: \"MMK\",\r\n    CcyNbr: \"104\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"MMK\",\r\n    keyCode: 10,\r\n    countyCode: \"en-MM\",\r\n  },\r\n  {\r\n    CtryNm: \"MAURITIUS\",\r\n    CurrencyName: \"Mauritius Rupee\",\r\n    Ccy: \"MUR\",\r\n    CcyNbr: \"480\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"MUR\",\r\n    keyCode: 9,\r\n    countyCode: \"en-MU\",\r\n  },\r\n  {\r\n    CtryNm: \"NIGERIA\",\r\n    CurrencyName: \"Naira\",\r\n    Ccy: \"NGN\",\r\n    CcyNbr: \"566\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"NGN\",\r\n    keyCode: 11,\r\n    countyCode: \"en-NG\",\r\n  },\r\n  {\r\n    CtryNm: \"UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND (THE)\",\r\n    CurrencyName: \"Pound Sterling\",\r\n    Ccy: \"GBP\",\r\n    CcyNbr: \"826\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"£\",\r\n    keyCode: 13,\r\n    countyCode: \"en-GB\",\r\n  },\r\n  {\r\n    CtryNm: \"BANGLADESH\",\r\n    CurrencyName: \"Taka\",\r\n    Ccy: \"BDT\",\r\n    CcyNbr: \"050\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"৳\",\r\n    keyCode: 5,\r\n    countyCode: \"en-BD\",\r\n  },\r\n  {\r\n    CtryNm: \"TURKEY\",\r\n    CurrencyName: \"Turkish Lira\",\r\n    Ccy: \"TRY\",\r\n    CcyNbr: \"949\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"TRY\",\r\n    keyCode: 12,\r\n    countyCode: \"tr-TR\",\r\n  },\r\n  {\r\n    CtryNm: \"PUERTO RICO\",\r\n    CurrencyName: \"US Dollar\",\r\n    Ccy: \"USD\",\r\n    CcyNbr: \"840\",\r\n    CcyMnrUnts: \"2\",\r\n    prefix: \"$\",\r\n    keyCode: 14,\r\n    countyCode: \"en-US\",\r\n  },\r\n];\r\nexport const CountryListInterNational = [\r\n  { countyName: \"English\", countyCode: \"en\" },\r\n  { countyName: \"Portuguese (Brazil)\\t\", countyCode: \"pt\" },\r\n  { countyName: \"Portuguese (Portugal)\\t\", countyCode: \"ptPT\" },\r\n  { countyName: \"Spanish\", countyCode: \"es\" },\r\n  { countyName: \"French\", countyCode: \"fr\" },\r\n  { countyName: \"Esperanto\", countyCode: \"eo\" },\r\n  { countyName: \"Vietnamese\", countyCode: \"vi\" },\r\n  { countyName: \"Arabic\", countyCode: \"ar\" },\r\n  { countyName: \"Azerbaijan\", countyCode: \"az\" },\r\n  { countyName: \"Turkish\", countyCode: \"tr\" },\r\n  { countyName: \"English (Indian)\\t\", countyCode: \"enIndian\" },\r\n  { countyName: \"Ukrainian\", countyCode: \"uk\" },\r\n  { countyName: \"Indonesian\", countyCode: \"id\" },\r\n  { countyName: \"Russian\", countyCode: \"ru\" },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Navbar, Nav } from \"reactstrap\";\r\nimport \"./index.scss\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst MaterialUISwitch = styled(Switch)(({ theme }) => ({\r\n  width: 62,\r\n  height: 34,\r\n  padding: 7,\r\n  \"& .MuiSwitch-switchBase\": {\r\n    margin: 1,\r\n    padding: 0,\r\n    transform: \"translateX(6px)\",\r\n    \"&.Mui-checked\": {\r\n      color: \"#fff\",\r\n      transform: \"translateX(22px)\",\r\n      \"& .MuiSwitch-thumb:before\": {\r\n        backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\r\n          \"#fff\"\r\n        )}\" d=\"M4.2 2.5l-.7 1.8-1.8.7 1.8.7.7 1.8.6-1.8L6.7 5l-1.9-.7-.6-1.8zm15 8.3a6.7 6.7 0 11-6.6-6.6 5.8 5.8 0 006.6 6.6z\"/></svg>')`,\r\n      },\r\n      \"& + .MuiSwitch-track\": {\r\n        opacity: 1,\r\n        backgroundColor: theme.palette.mode === \"dark\" ? \"#8796A5\" : \"#aab4be\",\r\n      },\r\n    },\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    backgroundColor: theme.palette.mode === \"dark\" ? \"#003892\" : \"#001e3c\",\r\n    width: 32,\r\n    height: 32,\r\n    \"&:before\": {\r\n      content: \"''\",\r\n      position: \"absolute\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      left: 0,\r\n      top: 0,\r\n      backgroundRepeat: \"no-repeat\",\r\n      backgroundPosition: \"center\",\r\n      backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\r\n        \"#fff\"\r\n      )}\" d=\"M9.305 1.667V3.75h1.389V1.667h-1.39zm-4.707 1.95l-.982.982L5.09 6.072l.982-.982-1.473-1.473zm10.802 0L13.927 5.09l.982.982 1.473-1.473-.982-.982zM10 5.139a4.872 4.872 0 00-4.862 4.86A4.872 4.872 0 0010 14.862 4.872 4.872 0 0014.86 10 4.872 4.872 0 0010 5.139zm0 1.389A3.462 3.462 0 0113.471 10a3.462 3.462 0 01-3.473 3.472A3.462 3.462 0 016.527 10 3.462 3.462 0 0110 6.528zM1.665 9.305v1.39h2.083v-1.39H1.666zm14.583 0v1.39h2.084v-1.39h-2.084zM5.09 13.928L3.616 15.4l.982.982 1.473-1.473-.982-.982zm9.82 0l-.982.982 1.473 1.473.982-.982-1.473-1.473zM9.305 16.25v2.083h1.389V16.25h-1.39z\"/></svg>')`,\r\n    },\r\n  },\r\n  \"& .MuiSwitch-track\": {\r\n    opacity: 1,\r\n    backgroundColor: theme.palette.mode === \"dark\" ? \"#8796A5\" : \"#aab4be\",\r\n    borderRadius: 20 / 2,\r\n  },\r\n}));\r\nconst HeaderNavbar = ({\r\n  handleSwitch = () => {},\r\n  colorKey,\r\n  isNightMode = false,\r\n}) => {\r\n  const [sticky, setSticky] = useState(false);\r\n  useEffect(() => {\r\n    document.addEventListener(\"scroll\", trackScroll);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"scroll\", trackScroll);\r\n    };\r\n  }, []);\r\n\r\n  const trackScroll = () => {\r\n    if (typeof window == \"undefined\") {\r\n      return;\r\n    } else {\r\n      setSticky(window.scrollY >= 5);\r\n    }\r\n  };\r\n  let history = useHistory();\r\n\r\n  return (\r\n    <div>\r\n      <Navbar\r\n        expand=\"md\"\r\n        className={`${\r\n          sticky && \"sticky-bg\"\r\n        } ${colorKey} header-navbar bg-primary-color`}\r\n      >\r\n        <Nav className=\"header-navbar-title\">\r\n          <h2\r\n            className=\"text-black mb-0 py-1 fw-400\"\r\n            onClick={() => {\r\n              history.push(\"/\");\r\n            }}\r\n          >\r\n            NumbersToWords\r\n          </h2>\r\n          {isNightMode ? (\r\n            \"\"\r\n          ) : (\r\n            <div className=\"switch\">\r\n              <FormGroup>\r\n                <FormControlLabel\r\n                  control={<MaterialUISwitch sx={{ m: 1 }} />}\r\n                  label=\"\"\r\n                  onChange={handleSwitch}\r\n                />\r\n              </FormGroup>\r\n            </div>\r\n          )}\r\n        </Nav>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderNavbar;\r\n","import React from \"react\";\r\n\r\nexport default function CardBody({ colorKey }) {\r\n  return (\r\n    <div className={`${colorKey} body-content`}>\r\n      <div className=\"brief\">\r\n        <div>\r\n          <h3>What is a number to word converter?</h3>\r\n          <p>\r\n            A number to word converter is a tool that converts numbers to word\r\n            format. Normally, we write numbers in digits, but sometimes we need\r\n            to put the numbers in English as well to cross-check the figure and\r\n            improve readability.This will help you in write a cheque.\r\n          </p>\r\n          <h3>How to read numbers in words ?</h3>\r\n          <p className=\"pb-2\">\r\n            <strong>Number in English Words (Indian Format)</strong> - You can\r\n            read numbers in English words in Indian number format, which uses\r\n            lakhs and crores rather than million and billion in international\r\n            number format. You can modify the case of words in a variety of\r\n            formats, including sentence case, title case, capital case, lower\r\n            case, and upper case.\r\n          </p>\r\n          <p>\r\n            <strong> Number to Words in International Format</strong> - You can\r\n            convert any number to words in International format, such as million\r\n            or billion. The reading of numbers differs between the International\r\n            and Indian formats. The international format employs the usage of\r\n            separates (commas) after every three digits and uses Million,\r\n            Billion, Trillion, and so on. In Indian format, we use Lakh, Crore,\r\n            and so on, with separators after every two digits.\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <h3>Number converter in Indian language</h3>\r\n          <p>\r\n            Convert a number or an amount to words. The amount you provide will\r\n            be converted into words in English, Hindi, Gujarati, and\r\n            Marathi.It's a free and powerful number-to-word converter that also\r\n            outputs in Indian rupees and different language, making it\r\n            beneficial for completing tasks and saving time.\r\n          </p>\r\n          <h3>Number converter in another language</h3>\r\n          <p className=\"pb-0\">\r\n            If you want to convert a different language, Simply choose a\r\n            currency from the list, such as Euro ,Ghana Cedi, Indian Rupee,\r\n            Iranian Rial, Kyat, Mauritius Rupee, Naira, Pound Sterling, Taka,\r\n            Turkish Lira, or US Dollar.Once you've chosen a currency type, it\r\n            will automatically select a countyName name based on the currency\r\n            type, and you can just enter a amount or number, which will be\r\n            converted to words. It's a handy tool for assisting you with\r\n            day-to-day tasks.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { FacebookFilled } from \"@ant-design/icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function Footer() {\r\n  let history = useHistory();\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>Copyright © 2022</p>\r\n      <p>Made with ❤ by numberstowords.online </p>\r\n      <div>\r\n        <div>\r\n          <span\r\n            onClick={() => {\r\n              history.push(\"/contact-us\");\r\n            }}\r\n          >\r\n            Contact Us{\" \"}\r\n          </span>\r\n          <span className=\"px-2\">|</span>\r\n          <span\r\n            onClick={() => {\r\n              history.push(\"/privacy-policy\");\r\n            }}\r\n          >\r\n            {\" \"}\r\n            Privacy Policy\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <a\r\n            href=\"https://www.facebook.com/numberstowords\"\r\n            target={\"_blank\"}\r\n            rel=\"noopener noreferrer\"\r\n            className=\"facebook\"\r\n          >\r\n            <FacebookFilled />\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Input, Select } from \"antd\";\r\nimport { ToWords } from \"to-words\";\r\nimport \"./style.scss\";\r\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\r\nimport DeleteIcon from \"@mui/icons-material/DeleteOutlineOutlined\";\r\nimport { NormalInput } from \"component/Common/NormalInput\";\r\nimport {\r\n  CountryList,\r\n  currencyListNumber,\r\n  CountryListInterNational,\r\n} from \"service/constant\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { Tooltip } from \"antd\";\r\nimport HeaderNavbar from \"component/Common/navbar\";\r\nimport CardBody from \"./CardBody\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst writtenNumber = require(\"written-number\");\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nconst DEFAULT_KEY = 1;\r\n\r\nconst initialCurrencyWord = CountryList.filter(\r\n  (ele) => ele.extraKey === DEFAULT_KEY && ele\r\n);\r\n\r\n/// NUMBER SELECT OPTION\r\nconst currencyOptions = currencyListNumber.map(({ CurrencyName, keyCode }) => ({\r\n  label: `${CurrencyName}`,\r\n  value: `${keyCode}`,\r\n}));\r\n\r\nconst NumberToWordComp = () => {\r\n  const [FormFields, setFormFields] = useState({\r\n    isAmount: \"\",\r\n    convertedWord: \"\",\r\n    currencySelect: \"\",\r\n    isPrefix: \"₹\",\r\n    amountNAN: false,\r\n    copiedEnglish: false,\r\n    copied: false,\r\n    isLocale: \"en-IN\",\r\n    isCurrencyWord: \"en-IN\",\r\n    isInterNationalLocale: \"en\",\r\n    convertedWordInternational: \"\",\r\n    isTheme: false,\r\n  });\r\n\r\n  const [currencySelectWord, setCurrencySelectWord] =\r\n    useState(initialCurrencyWord);\r\n\r\n  const toWords = new ToWords({\r\n    localeCode: FormFields.isLocale,\r\n    converterOptions: {\r\n      currency: true,\r\n      ignoreDecimal: false,\r\n      ignoreZeroCurrency: false,\r\n      doNotAddOnly: false,\r\n    },\r\n  });\r\n\r\n  //NUMBER INPUT FUNCTION\r\n  const handleInput = (e) => {\r\n    const { value } = e.target || e || {};\r\n\r\n    let splitValue;\r\n    splitValue = value.split(\" \")[1].replace(/[,]/g, \"\");\r\n\r\n    if (splitValue) {\r\n      handleConvertToWord(splitValue);\r\n    } else {\r\n      setFormFields({\r\n        ...FormFields,\r\n        convertedWord: \"\",\r\n        convertedWordInternational: \"\",\r\n        isAmount: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  ///COMMON TEXTAREA CONVERTER FUNCTION\r\n  const handleConvertToWord = (value) => {\r\n    if (value) {\r\n      toWords.options.localeCode = FormFields.isLocale;\r\n      let convertedWord = toWords.convert(value, { currency: true });\r\n      let convertedWordInternational = writtenNumber(value, {\r\n        lang: FormFields.isInterNationalLocale,\r\n      })\r\n        .split(\" \")\r\n        .map((w) => w[0].toUpperCase() + w.substring(1).toLowerCase())\r\n        .join(\" \");\r\n      setFormFields({\r\n        ...FormFields,\r\n        isAmount: value,\r\n        convertedWord,\r\n        convertedWordInternational,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSelect = (valueKeyCode) => {\r\n    let filterCurrencySelectWord = CountryList.filter((ele) => {\r\n      return ele.keyCode === valueKeyCode;\r\n    });\r\n    setCurrencySelectWord(filterCurrencySelectWord);\r\n    let getCountryCode = currencyListNumber.filter((ele, index) => {\r\n      return ele.keyCode === valueKeyCode;\r\n    })[0];\r\n\r\n    if (valueKeyCode === 1) {\r\n      let getIndiaList = CountryList.filter((ele) => {\r\n        return ele.extraKey === valueKeyCode;\r\n      });\r\n      setCurrencySelectWord(getIndiaList);\r\n    }\r\n\r\n    // //common fn need to handle\r\n    if (FormFields.isAmount) {\r\n      toWords.options.localeCode = filterCurrencySelectWord[0].countyCode;\r\n      let convertedWord = toWords.convert(FormFields.isAmount, {\r\n        currency: true,\r\n      });\r\n      setFormFields({\r\n        ...FormFields,\r\n        convertedWord,\r\n        isLocale: filterCurrencySelectWord[0].countyCode,\r\n        isCurrencyWord: filterCurrencySelectWord[0].countyCode,\r\n        isPrefix: getCountryCode.prefix,\r\n      });\r\n    } else {\r\n      setFormFields({\r\n        ...FormFields,\r\n        currencySelect: valueKeyCode,\r\n        isPrefix: getCountryCode.prefix,\r\n        isLocale: filterCurrencySelectWord[0].countyCode,\r\n        isCurrencyWord: filterCurrencySelectWord[0].countyCode,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSelectWord = (locale) => {\r\n    // //common fn need to handle\r\n    if (FormFields.isAmount) {\r\n      toWords.options.localeCode = locale;\r\n      let convertedWord = toWords.convert(FormFields.isAmount, {\r\n        currency: true,\r\n      });\r\n      setFormFields({\r\n        ...FormFields,\r\n        convertedWord,\r\n        isLocale: locale,\r\n        isCurrencyWord: locale,\r\n      });\r\n    } else {\r\n      setFormFields({\r\n        ...FormFields,\r\n        isLocale: locale,\r\n        isCurrencyWord: locale,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSelectInternational = (locale) => {\r\n    // //common fn need to handle\r\n    if (FormFields.isAmount) {\r\n      let convertedWordInternational = writtenNumber(FormFields.isAmount, {\r\n        lang: locale,\r\n      })\r\n        .split(\" \")\r\n        .map((w) => w[0].toUpperCase() + w.substring(1).toLowerCase())\r\n        .join(\" \");\r\n      setFormFields({\r\n        ...FormFields,\r\n        convertedWordInternational,\r\n        isInterNationalLocale: locale,\r\n      });\r\n    } else {\r\n      setFormFields({\r\n        ...FormFields,\r\n        isInterNationalLocale: locale,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCase = (key, id) => {\r\n    let convertedCase;\r\n    if (key && id === 1) {\r\n      convertedCase = FormFields.convertedWord;\r\n      if (convertedCase) {\r\n        setFormFields({\r\n          ...FormFields,\r\n          convertedWord:\r\n            key === \"upper\"\r\n              ? convertedCase.toUpperCase()\r\n              : key === \"lower\"\r\n              ? convertedCase.toLowerCase()\r\n              : convertedCase\r\n                  .split(\" \")\r\n                  .map((w) => w[0].toUpperCase() + w.substring(1).toLowerCase())\r\n                  .join(\" \"),\r\n        });\r\n      }\r\n    } else if (key && id === 2) {\r\n      convertedCase = FormFields.convertedWordInternational;\r\n      if (convertedCase) {\r\n        setFormFields({\r\n          ...FormFields,\r\n          convertedWordInternational:\r\n            key === \"upper\"\r\n              ? convertedCase.toUpperCase()\r\n              : key === \"lower\"\r\n              ? convertedCase.toLowerCase()\r\n              : convertedCase\r\n                  .split(\" \")\r\n                  .map((w) => w[0].toUpperCase() + w.substring(1).toLowerCase())\r\n                  .join(\" \"),\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const handleDelete = () => {\r\n    setFormFields({\r\n      ...FormFields,\r\n      convertedWord: \"\",\r\n      convertedWordInternational: \"\",\r\n      isAmount: \"\",\r\n    });\r\n  };\r\n  const handleSample = () => {\r\n    let sample = 100000;\r\n    let convertedWord = toWords.convert(sample, {\r\n      currency: true,\r\n    });\r\n    let convertedWordInternational = writtenNumber(sample)\r\n      .split(\" \")\r\n      .map((w) => w[0].toUpperCase() + w.substring(1).toLowerCase())\r\n      .join(\" \");\r\n    setFormFields({\r\n      ...FormFields,\r\n      convertedWord,\r\n      convertedWordInternational,\r\n      isAmount: sample,\r\n    });\r\n  };\r\n  const handleSwitch = (e) => {\r\n    setFormFields({\r\n      ...FormFields,\r\n      isTheme: e.target.checked,\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <HeaderNavbar\r\n        handleSwitch={handleSwitch}\r\n        colorKey={`${FormFields.isTheme ? \"black\" : \"light\"}`}\r\n      />\r\n      <div className={`dark-mode ${FormFields.isTheme ? \"black\" : \"light\"}`}>\r\n        <div className=\"layout\">\r\n          <div className=\"card-title\">\r\n            <h1>\r\n              Numbers to Words <strong>Converter</strong>\r\n            </h1>\r\n            <p>\r\n              Enter the values you want to convert from{\" \"}\r\n              <strong>numbers to words</strong>.\r\n            </p>\r\n          </div>\r\n          <div className=\"sample-delete\">\r\n            <Tooltip\r\n              title=\"Sample Data\"\r\n              placement=\"leftBottom\"\r\n              color={\"#102243\"}\r\n            >\r\n              <span onClick={handleSample}>Sample</span>\r\n            </Tooltip>\r\n            <span onClick={handleDelete} className=\"delete-clip\">\r\n              <Tooltip\r\n                placement=\"rightBottom\"\r\n                title={\"Clear\"}\r\n                color={\"#102243\"}\r\n              >\r\n                <DeleteIcon />\r\n              </Tooltip>\r\n            </span>\r\n          </div>\r\n          <div className=\"card-body-view\">\r\n            <div className=\"card-details\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-6 d-flex\">\r\n                      <h6>Enter Number or Amount</h6>\r\n                    </div>\r\n                    <div className=\"col-6 \">\r\n                      <div className=\"d-flex justify-content-end pr-3 mb-2 mobile-adjust\">\r\n                        <Select\r\n                          defaultValue={\"1\"}\r\n                          showSearch\r\n                          dropdownStyle={{\r\n                            backgroundColor: \"#fffffff7\",\r\n                          }}\r\n                          placeholder=\"Search to Select Currency\"\r\n                          optionFilterProp=\"children\"\r\n                          filterOption={(input, option) =>\r\n                            option.children\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                          filterSort={(optionA, optionB) =>\r\n                            optionA.children\r\n                              .toLowerCase()\r\n                              .localeCompare(optionB.children.toLowerCase())\r\n                          }\r\n                          name=\"currencySelect\"\r\n                          onChange={(e) => {\r\n                            handleSelect(parseInt(e));\r\n                          }}\r\n                        >\r\n                          {currencyOptions.map((opt) => (\r\n                            <Option value={opt.value} key={opt.value}>\r\n                              {opt.label}\r\n                            </Option>\r\n                          ))}\r\n                        </Select>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <NormalInput\r\n                    placeholder={`${\"Enter Number between 1 to 999999999\"}`}\r\n                    thousandSeparator={true}\r\n                    prefix={`${FormFields.isPrefix} `}\r\n                    name=\"isAmount\"\r\n                    value={FormFields.isAmount}\r\n                    onChange={handleInput}\r\n                    className=\"normal-input-number\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row pt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-6 d-flex\">\r\n                      <h6>In Words English</h6>\r\n                    </div>\r\n                    <div className=\"col-6 d-flex justify-content-end align-items-center mobile-adjust\">\r\n                      <div className=\"d-flex justify-content-end pr-3 mb-2\">\r\n                        <CopyToClipboard\r\n                          text={FormFields.convertedWord}\r\n                          onCopy={() =>\r\n                            setFormFields({\r\n                              ...FormFields,\r\n                              copiedEnglish: true,\r\n                              copied: false,\r\n                            })\r\n                          }\r\n                        >\r\n                          <Tooltip\r\n                            placement=\"left\"\r\n                            title={`${\r\n                              FormFields.copiedEnglish\r\n                                ? \"copied\"\r\n                                : \"Copy To Clipboard\"\r\n                            }`}\r\n                            color={\"#102243\"}\r\n                          >\r\n                            <span className=\"copy-clip\">\r\n                              <ContentCopyIcon />\r\n                            </span>\r\n                          </Tooltip>\r\n                        </CopyToClipboard>\r\n\r\n                        <Select\r\n                          dropdownStyle={{\r\n                            backgroundColor: \"#fffffff7\",\r\n                          }}\r\n                          defaultValue={currencySelectWord[0].countyCode}\r\n                          showSearch\r\n                          placeholder=\"Search to Select Currency\"\r\n                          optionFilterProp=\"children\"\r\n                          filterOption={(input, option) =>\r\n                            option.children\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                          filterSort={(optionA, optionB) =>\r\n                            optionA.children\r\n                              .toLowerCase()\r\n                              .localeCompare(optionB.children.toLowerCase())\r\n                          }\r\n                          value={FormFields.isCurrencyWord}\r\n                          onChange={handleSelectWord}\r\n                        >\r\n                          {currencySelectWord.map((opt) => (\r\n                            <Option value={opt.countyCode} key={opt.countyCode}>\r\n                              {opt.countyName}\r\n                            </Option>\r\n                          ))}\r\n                        </Select>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <TextArea\r\n                    showCount\r\n                    maxLength={100}\r\n                    name=\"convertedWord\"\r\n                    value={FormFields.convertedWord}\r\n                    className=\"text-area\"\r\n                  />\r\n                  <span\r\n                    className=\"text-change\"\r\n                    onClick={() => {\r\n                      handleCase(\"upper\", 1);\r\n                    }}\r\n                  >\r\n                    Upper Case\r\n                  </span>\r\n                  <span\r\n                    className=\"text-change\"\r\n                    onClick={() => {\r\n                      handleCase(\"lower\", 1);\r\n                    }}\r\n                  >\r\n                    Lower Case\r\n                  </span>\r\n                  <span\r\n                    className=\"text-change\"\r\n                    onClick={() => {\r\n                      handleCase(\"title\", 1);\r\n                    }}\r\n                  >\r\n                    Title Case\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"row pt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-7 d-flex\">\r\n                      <h6>In Words International Format</h6>\r\n                    </div>\r\n                    <div className=\"col-5 d-flex justify-content-end align-items-center \">\r\n                      <div className=\"d-flex justify-content-end pr-3 mb-2 mobile-adjust\">\r\n                        <CopyToClipboard\r\n                          text={FormFields.convertedWordInternational}\r\n                          onCopy={() =>\r\n                            setFormFields({\r\n                              ...FormFields,\r\n                              copiedEnglish: false,\r\n                              copied: true,\r\n                            })\r\n                          }\r\n                        >\r\n                          <Tooltip\r\n                            placement=\"left\"\r\n                            title={`${\r\n                              FormFields.copied ? \"copied\" : \"Copy To Clipboard\"\r\n                            }`}\r\n                            color={\"#102243\"}\r\n                          >\r\n                            <span className=\"copy-clip\">\r\n                              <ContentCopyIcon />{\" \"}\r\n                            </span>\r\n                          </Tooltip>\r\n                        </CopyToClipboard>\r\n\r\n                        <Select\r\n                          dropdownStyle={{\r\n                            backgroundColor: \"#fffffff7\",\r\n                          }}\r\n                          defaultValue={CountryListInterNational[0].countyName}\r\n                          showSearch\r\n                          placeholder=\"Search to Select Currency\"\r\n                          optionFilterProp=\"children\"\r\n                          filterOption={(input, option) =>\r\n                            option.children\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                          filterSort={(optionA, optionB) =>\r\n                            optionA.children\r\n                              .toLowerCase()\r\n                              .localeCompare(optionB.children.toLowerCase())\r\n                          }\r\n                          onChange={handleSelectInternational}\r\n                          value={FormFields.isInterNationalLocale}\r\n                        >\r\n                          {CountryListInterNational.map((opt) => (\r\n                            <Option value={opt.countyCode} key={opt.countyCode}>\r\n                              {opt.countyName}\r\n                            </Option>\r\n                          ))}\r\n                        </Select>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <TextArea\r\n                    showCount\r\n                    maxLength={100}\r\n                    name=\"convertedWordInternational\"\r\n                    value={FormFields.convertedWordInternational}\r\n                    className=\"text-area\"\r\n                  />\r\n                  <span\r\n                    className=\"text-change\"\r\n                    onClick={() => {\r\n                      handleCase(\"upper\", 2);\r\n                    }}\r\n                  >\r\n                    Upper Case\r\n                  </span>\r\n                  <span\r\n                    className=\"text-change\"\r\n                    onClick={() => {\r\n                      handleCase(\"lower\", 2);\r\n                    }}\r\n                  >\r\n                    Lower Case\r\n                  </span>\r\n                  <span\r\n                    className=\"text-change\"\r\n                    onClick={() => {\r\n                      handleCase(\"title\", 2);\r\n                    }}\r\n                  >\r\n                    Title Case\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <p className=\"keyword\">\r\n                <strong>Note :</strong> Number converter for words online,\r\n                automatic converter, generate numeric text. We set the indian\r\n                rupees by default, but if you want to convert to another\r\n                language, use the dropdown menu.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <CardBody colorKey={`${FormFields.isTheme ? \"black\" : \"light\"}`} />\r\n        <Footer />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default NumberToWordComp;\r\n","import NumberToWordComp from \"component/NumberToWordComp\";\r\nimport React, { useEffect } from \"react\";\r\n\r\nexport const NumberToWord = () => {\r\n  useEffect(() => {\r\n    document.addEventListener(\"contextmenu\", (event) => event.preventDefault());\r\n    document.onkeydown = function (e) {\r\n      var key = e.key;\r\n      if (key === \"F12\") {\r\n        e.preventDefault();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return <NumberToWordComp />;\r\n};\r\n","import React from \"react\";\r\nimport \"./style.scss\";\r\nimport HeaderNavbar from \"component/Common/navbar\";\r\n\r\nexport const ContactUs = () => {\r\n  return (\r\n    <>\r\n      <HeaderNavbar isNightMode={true} />\r\n      <div className=\"contact-us\">\r\n        <div className=\"layout-contact\">\r\n          For any Question, Suggestion, Feedback, New Information Required or\r\n          Any Bug Found on Website Please email us-{\" \"}\r\n          <strong>numberstowords2022@gmail.com</strong> or message on Whatsapp\r\n          WA - <strong>+91 8072177472</strong> (If you're reporting an issue,\r\n          please include screen images of the bug without them, we won't be able\r\n          to identify it.)\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./style.scss\";\r\nimport HeaderNavbar from \"component/Common/navbar\";\r\n\r\nexport const Policy = () => {\r\n  return (\r\n    <div>\r\n      <HeaderNavbar isNightMode={true} />\r\n      <div className=\"dark-privacy\">\r\n        <div className=\"layout-privacy\">\r\n          <h1>Privacy Policy for Numberstowords</h1>\r\n          <p>\r\n            We do not save or collect the data that you are converting on{\" \"}\r\n            <strong>numberstowords.online</strong>, since the tools activity\r\n            occurs on the client side, this means that the processing is done by\r\n            your computer.\r\n          </p>\r\n          <h2>Analytics and Logs</h2>\r\n          <p>\r\n            As many websites <strong>numberstowords.online</strong> use Google\r\n            Analytics for support of site administration like demographic\r\n            information and or analyze trends. The only information we do\r\n            collect is used to improve the content of our Web pages.\r\n          </p>\r\n\r\n          <h2>Google Adsense and the DoubleClick DART Cookie</h2>\r\n\r\n          <p>\r\n            Google, as a third party vendor, uses cookies to serve ads on{\" \"}\r\n            <strong>numberstowords.online</strong>. This DART cookies enables\r\n            Google to serve ads to visitors that visits sites over the internet\r\n            as well <strong>numberstowords.online</strong>\r\n          </p>\r\n          <p>\r\n            All visitors may opt to not use the DART cookie by visiting the\r\n            Google ad and content network privacy policy at{\" \"}\r\n            <strong>http://www.google.com/privacy_ads.html</strong> DART cookie\r\n            mechanisms are subject to Google’s own privacy policies.\r\n          </p>\r\n          <p>\r\n            Third Party ad servers or ad networks may also use cookies to track\r\n            users activities on this website{\" \"}\r\n            <strong>numberstowords.online</strong> has no access to or control\r\n            over these cookies that are used by third-party advertisers.\r\n          </p>\r\n\r\n          <h2>Changes to this Privacy Statement</h2>\r\n\r\n          <p>\r\n            The contents of this statement may be altered at any time, at our\r\n            discretion.\r\n          </p>\r\n\r\n          <h2>More information</h2>\r\n\r\n          <p>\r\n            If you have any questions regarding the privacy policy of{\" \"}\r\n            <strong>numberstowords.online</strong> then please feel free to\r\n            contact us at <strong>numberstowords2022@gmail.com</strong>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { PageNotFound } from \"pages/PageNotFound\";\r\nimport React from \"react\";\r\nimport { Switch, Route } from \"react-router\";\r\nimport { NumberToWord, ContactUs, Policy } from \"./pages\";\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/privacy-policy\" component={Policy} exact />\r\n      <Route path=\"/contact-us\" component={ContactUs} exact />\r\n      <Route path=\"/\" component={NumberToWord} exact />\r\n      <Route component={PageNotFound} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./assets/scss/index.scss\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Routes from \"./Routes\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Routes />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}